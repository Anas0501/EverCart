THIS FILE HAS THE THINKING WHILE I WAS MAKING THE PROJECT SO JUST IGNORE THE FILE THERE IS NOTHING IMPORTANT IN THIS FILE 
DashBoard-https://dribbble.com/shots/19855432-E-commerce-Dashboard
Main Page-https://dribbble.com/shots/21188194-sport-shop-website-design
CallBack-https://evercart-0501.firebaseapp.com/__/auth/handler

routes-
		for Users{[/api/auth/]
			authUser,(user auth user middleware)-PENDING
			createNewUser,- DONE
			getAllUser,-DONE
			getUserById,- DONE
			getLoggedInUser, -DONE
			editProfile,-DONE
			logoutUser,-PENDING
			deleteUser,-DONE
		},
		for Products{[api/product]
			createProduct,-DONE
			getAllProducts,-DONE
			getProductById,-DONE
			getmyProducts,-DONE
			updateProduct,-DONE
			deleteProduct,-DONE
		},
		for Review{[/api/review]
			getAllProductReview,-DONE
			CreateProductReview,-DONE
			updateProductReview,-DONE
			deleteProductReview,-DONE
		},
		for Order{[/api/order]
			createNewOrder,
			getMyOrder,
			getAllOrders,
			getOrderById,
			updateOrderToPaid,
			UpdateOrdertoDelivered,
		},


To implement authentication

In frontend when you get the data of the user from firebase.
Firebase also allows us to get the idToken of the user

With that idToken we can find the data of the user in our backend.


Whenever we send request to server we will send idToken to the backend
On server we can use that idToken to find the data of the user

getCurrentUser
	- Get firebase userdata from the idToken
	- That userdata contains a uid
	- With that uid we get the userdata from our own database
	- const user= await User.find({ uid })


REPLANING THE PROJECT BACKEND - [{(
	routes-
		for Users{[/api/auth/]
			authUser,(user auth user middleware)
			createNewUser,-DONE
			getAllUser,
			getUserById,
			getLoggedInUser,
			editProfile,
			logoutUser,
			deleteUser,
			
		},
		for Products{[api/product]
			createProduct,
			getAllProducts,
			getProductById,
			getmyProducts,
			updateProduct,
			deleteProduct,
		},
		for Review{[/api/review]
			getAllProductReview,
			CreateProductReview,
			updateProductReview,
			deleteProductReview,
		},
		for Order{[/api/order]
			createNewOrder,
			getMyOrder,
			getAllOrders,
			getOrderById,
			updateOrderToPaid,
			UpdateOrdertoDelivered,
		},
)}]


	
	<ThemeProvider theme={defaultTheme}>
			<Navbar />
			<Grid container component="main" sx={{ height: '100vh' }}>
				<CssBaseline />
				<Grid
					item
					xs={false}
					sm={4}
					md={7}
					sx={{
						backgroundImage: `url(${EverCartDarkBg})`,
						backgroundRepeat: 'no-repeat',
						backgroundColor: (t) =>
							t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],
						backgroundSize: 'cover',
						backgroundPosition: 'center',
					}}
				/>
				<Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>
					<Box
						sx={{
							my: 8,
							mx: 4,
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
							<LockOutlinedIcon />
						</Avatar>
						<Typography component="h1" variant="h5">
							Sign in
						</Typography>
						<Box component="form" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>
							<TextField
								margin="normal"
								required
								fullWidth
								id="email"
								label="Email Address"
								name="email"
								autoComplete="email"
								autoFocus
								sx={{
									'& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {
										borderColor: 'white',
									},
									'& .MuiInputLabel-root.Mui-focused': {
										color: 'white',
									},
								}}
							/>
							<TextField
								margin="normal"
								required
								fullWidth
								name="password"
								label="Password"
								type="password"
								id="password"
								autoComplete="current-password"
								sx={{
									'& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {
										borderColor: 'white',
									},
									'& .MuiInputLabel-root.Mui-focused': {
										color: 'white',
									},
								}}
							/>
							<Button
								type="submit"
								fullWidth
								variant="contained"
								sx={{ mt: 3, mb: 2}}
							>
								Sign In
							</Button>
							<Grid container>
								<Grid item xs>
									<Link href={routes.FORGOT_PASSWORD} variant="body2" sx={{ color: 'white'}}>
										Forgot password?
									</Link>
								</Grid>
								<Grid item>
									<Link href={routes.REGISTER_PAGE} variant="body2" sx={{ color: 'white' }}>
										{"Don't have an account? Sign Up"}
									</Link>
								</Grid>
							</Grid>
						</Box>
					</Box>
				</Grid>
			</Grid>
		</ThemeProvider>